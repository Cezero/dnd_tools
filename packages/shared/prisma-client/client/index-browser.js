
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbreviation: 'abbreviation',
  editionId: 'editionId',
  isPrestige: 'isPrestige',
  isVisible: 'isVisible',
  canCastSpells: 'canCastSpells',
  hitDie: 'hitDie',
  description: 'description',
  skillPoints: 'skillPoints',
  castingAbilityId: 'castingAbilityId'
};

exports.Prisma.ClassFeatureScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  name: 'name',
  description: 'description',
  level: 'level'
};

exports.Prisma.ClassSpellLevelScalarFieldEnum = {
  classId: 'classId',
  level: 'level',
  spellLevel: 'spellLevel',
  numSpells: 'numSpells'
};

exports.Prisma.ClassLevelAttributeScalarFieldEnum = {
  classId: 'classId',
  level: 'level',
  baseAttackBonus: 'baseAttackBonus',
  fortSave: 'fortSave',
  refSave: 'refSave',
  willSave: 'willSave'
};

exports.Prisma.ClassSkillMapScalarFieldEnum = {
  classId: 'classId',
  skillId: 'skillId'
};

exports.Prisma.ClassSourceMapScalarFieldEnum = {
  classId: 'classId',
  pageNumber: 'pageNumber',
  sourceBookId: 'sourceBookId'
};

exports.Prisma.SpellLevelMapScalarFieldEnum = {
  classId: 'classId',
  spellId: 'spellId',
  level: 'level',
  isVisible: 'isVisible'
};

exports.Prisma.SpellScalarFieldEnum = {
  id: 'id',
  name: 'name',
  summary: 'summary',
  description: 'description',
  castingTime: 'castingTime',
  range: 'range',
  rangeTypeId: 'rangeTypeId',
  rangeValue: 'rangeValue',
  area: 'area',
  duration: 'duration',
  savingThrow: 'savingThrow',
  spellResistance: 'spellResistance',
  editionId: 'editionId',
  baseLevel: 'baseLevel',
  effect: 'effect',
  target: 'target'
};

exports.Prisma.SpellDescriptorMapScalarFieldEnum = {
  spellId: 'spellId',
  descriptorId: 'descriptorId'
};

exports.Prisma.SpellSchoolMapScalarFieldEnum = {
  spellId: 'spellId',
  schoolId: 'schoolId'
};

exports.Prisma.SpellSourceMapScalarFieldEnum = {
  spellId: 'spellId',
  sourceBookId: 'sourceBookId',
  pageNumber: 'pageNumber'
};

exports.Prisma.SpellSubschoolMapScalarFieldEnum = {
  spellId: 'spellId',
  subSchoolId: 'subSchoolId'
};

exports.Prisma.SpellComponentMapScalarFieldEnum = {
  spellId: 'spellId',
  componentId: 'componentId'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abilityId: 'abilityId',
  checkDescription: 'checkDescription',
  actionDescription: 'actionDescription',
  retryTypeId: 'retryTypeId',
  retryDescription: 'retryDescription',
  specialNotes: 'specialNotes',
  synergyNotes: 'synergyNotes',
  untrainedNotes: 'untrainedNotes',
  affectedByArmor: 'affectedByArmor',
  description: 'description',
  trainedOnly: 'trainedOnly'
};

exports.Prisma.FeatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  typeId: 'typeId',
  description: 'description',
  benefit: 'benefit',
  normalEffect: 'normalEffect',
  specialEffect: 'specialEffect',
  prerequisites: 'prerequisites',
  repeatable: 'repeatable',
  fighterBonus: 'fighterBonus'
};

exports.Prisma.FeatBenefitMapScalarFieldEnum = {
  featId: 'featId',
  typeId: 'typeId',
  referenceId: 'referenceId',
  amount: 'amount',
  index: 'index'
};

exports.Prisma.FeatPrerequisiteMapScalarFieldEnum = {
  featId: 'featId',
  typeId: 'typeId',
  referenceId: 'referenceId',
  amount: 'amount',
  index: 'index'
};

exports.Prisma.RaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  editionId: 'editionId',
  isVisible: 'isVisible',
  description: 'description',
  sizeId: 'sizeId',
  speed: 'speed',
  favoredClassId: 'favoredClassId'
};

exports.Prisma.RaceTraitScalarFieldEnum = {
  slug: 'slug',
  name: 'name',
  description: 'description',
  hasValue: 'hasValue'
};

exports.Prisma.RaceTraitMapScalarFieldEnum = {
  raceId: 'raceId',
  traitSlug: 'traitSlug',
  value: 'value'
};

exports.Prisma.RaceAbilityAdjustmentScalarFieldEnum = {
  raceId: 'raceId',
  abilityId: 'abilityId',
  value: 'value'
};

exports.Prisma.RaceLanguageMapScalarFieldEnum = {
  raceId: 'raceId',
  languageId: 'languageId',
  isAutomatic: 'isAutomatic'
};

exports.Prisma.RaceSourceMapScalarFieldEnum = {
  raceId: 'raceId',
  sourceBookId: 'sourceBookId',
  pageNumber: 'pageNumber'
};

exports.Prisma.ArmorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  cost: 'cost',
  bonus: 'bonus',
  dexterityCap: 'dexterityCap',
  checkPenalty: 'checkPenalty',
  arcaneSpellFailure: 'arcaneSpellFailure',
  speedCapThirty: 'speedCapThirty',
  speedCapTwenty: 'speedCapTwenty',
  weight: 'weight'
};

exports.Prisma.WeaponScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  type: 'type',
  cost: 'cost',
  damageSmall: 'damageSmall',
  damageMedium: 'damageMedium',
  critical: 'critical',
  range: 'range',
  weight: 'weight',
  damageTypeId: 'damageTypeId'
};

exports.Prisma.SourceBookScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbreviation: 'abbreviation',
  releaseDate: 'releaseDate',
  editionId: 'editionId',
  description: 'description',
  isVisible: 'isVisible'
};

exports.Prisma.ReferenceTableScalarFieldEnum = {
  slug: 'slug',
  name: 'name',
  description: 'description'
};

exports.Prisma.ReferenceTableColumnScalarFieldEnum = {
  tableSlug: 'tableSlug',
  index: 'index',
  header: 'header',
  span: 'span',
  alignment: 'alignment'
};

exports.Prisma.ReferenceTableRowScalarFieldEnum = {
  tableSlug: 'tableSlug',
  index: 'index'
};

exports.Prisma.ReferenceTableCellScalarFieldEnum = {
  tableSlug: 'tableSlug',
  columnIndex: 'columnIndex',
  rowIndex: 'rowIndex',
  value: 'value',
  colSpan: 'colSpan',
  rowSpan: 'rowSpan'
};

exports.Prisma.UserCharacterScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  raceId: 'raceId',
  alignmentId: 'alignmentId',
  age: 'age',
  height: 'height',
  weight: 'weight',
  eyes: 'eyes',
  hair: 'hair',
  gender: 'gender',
  notes: 'notes'
};

exports.Prisma.UserCharacterAttributeScalarFieldEnum = {
  id: 'id',
  characterId: 'characterId',
  attributeId: 'attributeId',
  value: 'value'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  preferredEditionId: 'preferredEditionId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ClassOrderByRelevanceFieldEnum = {
  name: 'name',
  abbreviation: 'abbreviation',
  description: 'description'
};

exports.Prisma.ClassFeatureOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.SpellOrderByRelevanceFieldEnum = {
  name: 'name',
  summary: 'summary',
  description: 'description',
  castingTime: 'castingTime',
  range: 'range',
  rangeValue: 'rangeValue',
  area: 'area',
  duration: 'duration',
  savingThrow: 'savingThrow',
  spellResistance: 'spellResistance',
  effect: 'effect',
  target: 'target'
};

exports.Prisma.SkillOrderByRelevanceFieldEnum = {
  name: 'name',
  checkDescription: 'checkDescription',
  actionDescription: 'actionDescription',
  retryDescription: 'retryDescription',
  specialNotes: 'specialNotes',
  synergyNotes: 'synergyNotes',
  untrainedNotes: 'untrainedNotes',
  description: 'description'
};

exports.Prisma.FeatOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  benefit: 'benefit',
  normalEffect: 'normalEffect',
  specialEffect: 'specialEffect',
  prerequisites: 'prerequisites'
};

exports.Prisma.RaceOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.RaceTraitOrderByRelevanceFieldEnum = {
  slug: 'slug',
  name: 'name',
  description: 'description'
};

exports.Prisma.RaceTraitMapOrderByRelevanceFieldEnum = {
  traitSlug: 'traitSlug'
};

exports.Prisma.ArmorOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.WeaponOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  damageSmall: 'damageSmall',
  damageMedium: 'damageMedium',
  critical: 'critical',
  range: 'range'
};

exports.Prisma.SourceBookOrderByRelevanceFieldEnum = {
  name: 'name',
  abbreviation: 'abbreviation',
  description: 'description'
};

exports.Prisma.ReferenceTableOrderByRelevanceFieldEnum = {
  slug: 'slug',
  name: 'name',
  description: 'description'
};

exports.Prisma.ReferenceTableColumnOrderByRelevanceFieldEnum = {
  tableSlug: 'tableSlug',
  header: 'header'
};

exports.Prisma.ReferenceTableRowOrderByRelevanceFieldEnum = {
  tableSlug: 'tableSlug'
};

exports.Prisma.ReferenceTableCellOrderByRelevanceFieldEnum = {
  tableSlug: 'tableSlug',
  value: 'value'
};

exports.Prisma.UserCharacterOrderByRelevanceFieldEnum = {
  name: 'name',
  eyes: 'eyes',
  hair: 'hair',
  gender: 'gender',
  notes: 'notes'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  username: 'username',
  email: 'email',
  password: 'password'
};
exports.TextAlignment = exports.$Enums.TextAlignment = {
  left: 'left',
  center: 'center',
  right: 'right'
};

exports.Prisma.ModelName = {
  Class: 'Class',
  ClassFeature: 'ClassFeature',
  ClassSpellLevel: 'ClassSpellLevel',
  ClassLevelAttribute: 'ClassLevelAttribute',
  ClassSkillMap: 'ClassSkillMap',
  ClassSourceMap: 'ClassSourceMap',
  SpellLevelMap: 'SpellLevelMap',
  Spell: 'Spell',
  SpellDescriptorMap: 'SpellDescriptorMap',
  SpellSchoolMap: 'SpellSchoolMap',
  SpellSourceMap: 'SpellSourceMap',
  SpellSubschoolMap: 'SpellSubschoolMap',
  SpellComponentMap: 'SpellComponentMap',
  Skill: 'Skill',
  Feat: 'Feat',
  FeatBenefitMap: 'FeatBenefitMap',
  FeatPrerequisiteMap: 'FeatPrerequisiteMap',
  Race: 'Race',
  RaceTrait: 'RaceTrait',
  RaceTraitMap: 'RaceTraitMap',
  RaceAbilityAdjustment: 'RaceAbilityAdjustment',
  RaceLanguageMap: 'RaceLanguageMap',
  RaceSourceMap: 'RaceSourceMap',
  Armor: 'Armor',
  Weapon: 'Weapon',
  SourceBook: 'SourceBook',
  ReferenceTable: 'ReferenceTable',
  ReferenceTableColumn: 'ReferenceTableColumn',
  ReferenceTableRow: 'ReferenceTableRow',
  ReferenceTableCell: 'ReferenceTableCell',
  UserCharacter: 'UserCharacter',
  UserCharacterAttribute: 'UserCharacterAttribute',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
