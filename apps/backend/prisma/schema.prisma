generator client {
    provider = "prisma-client-js"
    output   = "../../../packages/shared/prisma-client/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// =================
// Class related
// =================

model Class {
    id               Int     @id @default(autoincrement())
    name             String
    abbreviation     String
    editionId        Int?
    isPrestige       Boolean @default(false)
    isVisible        Boolean @default(true)
    canCastSpells    Boolean @default(false)
    hitDie           Int     @default(1)
    description      String? @db.Text
    skillPoints      Int
    castingAbilityId Int?

    features         ClassFeatureMap[]
    attributes       ClassLevelAttribute[]
    spellProgression ClassSpellProgression[]
    skills           ClassSkillMap[]
    sourceBookInfo   ClassSourceMap[]
    spellLevels      SpellLevelMap[]
}

model ClassFeature {
    slug        String  @id
    description String  @db.Text

    classes ClassFeatureMap[]
}

model ClassFeatureMap {
    classId     Int
    featureSlug String
    level       Int

    class   Class        @relation(fields: [classId], references: [id])
    feature ClassFeature @relation(fields: [featureSlug], references: [slug])

    @@id([classId, featureSlug])
}

model ClassSpellProgression {
    classId     Int
    level       Int
    spellLevel  Int
    spellSlots  Int

    class Class @relation(fields: [classId], references: [id])

    @@id([classId, level, spellLevel])
}

model ClassLevelAttribute {
    classId         Int
    level           Int
    baseAttackBonus Int
    fortSave        Int
    refSave         Int
    willSave        Int

    class Class @relation(fields: [classId], references: [id])
    @@id([classId, level])
}

model ClassSkillMap {
    classId Int
    skillId Int
    Class   Class @relation(fields: [classId], references: [id])
    Skill   Skill @relation(fields: [skillId], references: [id])

    @@id([classId, skillId])
}

model ClassSourceMap {
    classId      Int
    pageNumber   Int?
    sourceBookId Int

    class        Class       @relation(fields: [classId], references: [id])
    SourceBook   SourceBook? @relation(fields: [sourceBookId], references: [id])
    
    @@id([classId, sourceBookId])
}

model SpellLevelMap {
    classId   Int
    spellId   Int
    level     Int
    isVisible Boolean @default(true)

    spell Spell @relation(fields: [spellId], references: [id])
    class Class @relation(fields: [classId], references: [id])

    @@id([spellId, classId])
}

// =================
// Spell info
// =================

model Spell {
    id              Int     @id @default(autoincrement())
    name            String
    summary         String? @db.Text
    description     String? @db.Text
    castingTime     String?
    range           String?
    rangeTypeId     Int?
    rangeValue      String?
    area            String?
    duration        String?
    savingThrow     String?
    spellResistance String?
    editionId       Int
    baseLevel       Int
    effect          String?
    target          String?

    descriptorIds  SpellDescriptorMap[]
    levelMapping   SpellLevelMap[]
    schoolIds      SpellSchoolMap[]
    sourceBookInfo SpellSourceMap[]
    subSchoolIds   SpellSubschoolMap[]
    componentIds   SpellComponentMap[]
}

model SpellDescriptorMap {
    spellId      Int
    descriptorId Int
    Spell        Spell @relation(fields: [spellId], references: [id])

    @@id([spellId, descriptorId])
}

model SpellSchoolMap {
    spellId  Int
    schoolId Int
    Spell    Spell @relation(fields: [spellId], references: [id])

    @@id([spellId, schoolId])
}

model SpellSourceMap {
    spellId       Int
    sourceBookId  Int
    pageNumber    Int?

    Spell         Spell       @relation(fields: [spellId], references: [id])
    SourceBook    SourceBook @relation(fields: [sourceBookId], references: [id])

    @@id([spellId, sourceBookId])
}

model SpellSubschoolMap {
    spellId  Int
    subSchoolId Int

    Spell    Spell @relation(fields: [spellId], references: [id])

    @@id([spellId, subSchoolId])
}

model SpellComponentMap {
    spellId     Int
    componentId Int

    Spell   Spell @relation(fields: [spellId], references: [id])

    @@id([spellId, componentId])
}

// =================
// Skill Info
// =================

model Skill {
    id                Int      @id @default(autoincrement())
    name              String
    abilityId         Int      @default(1)
    checkDescription  String?  @db.Text
    actionDescription String?  @db.Text
    retryTypeId       Int?
    retryDescription  String?  @db.Text
    specialNotes      String?  @db.Text
    synergyNotes      String?  @db.Text
    untrainedNotes    String?  @db.Text
    affectedByArmor   Boolean  @default(false)
    description       String?  @db.Text
    trainedOnly       Boolean?

    classes ClassSkillMap[]
}

// =================
// Feats and related info
// =================

model Feat {
    id            Int      @id @default(autoincrement())
    name          String
    typeId        Int
    description   String?  @db.Text
    benefit       String?  @db.Text
    normalEffect  String?  @db.Text
    specialEffect String?  @db.Text
    prerequisites String?  @db.Text
    repeatable    Boolean?
    fighterBonus  Boolean?

    benefits         FeatBenefitMap[]
    prerequisitesMap FeatPrerequisiteMap[]
}

model FeatBenefitMap {
    featId      Int
    typeId      Int
    referenceId Int?
    amount      Int?
    index       Int

    feat Feat @relation(fields: [featId], references: [id])

    @@id([featId, index])
}

model FeatPrerequisiteMap {
    featId      Int
    typeId      Int
    referenceId Int?
    amount      Int?
    index       Int

    feat Feat @relation(fields: [featId], references: [id])

    @@id([featId, index])
}

// =================
// Race and related info
// =================

model Race {
    id             Int     @id @default(autoincrement())
    name           String
    editionId      Int?
    isVisible      Boolean @default(true)
    description    String? @db.Text
    sizeId         Int     @default(5)
    speed          Int     @default(30)
    favoredClassId Int     @default(0)

    abilityAdjustments RaceAbilityAdjustment[]
    languages          RaceLanguageMap[]
    sources            RaceSourceMap[]
    traits             RaceTraitMap[]
    UserCharacter      UserCharacter[]
}

model RaceTrait {
    slug        String  @id
    name        String?
    description String? @db.Text
    hasValue    Boolean @default(false)

    raceLinks RaceTraitMap[]
}

model RaceTraitMap {
    raceId    Int
    traitSlug String
    value     Int?

    race  Race      @relation(fields: [raceId], references: [id])
    trait RaceTrait @relation(fields: [traitSlug], references: [slug])

    @@id([raceId, traitSlug])
}

model RaceAbilityAdjustment {
    raceId    Int
    abilityId Int
    value     Int

    race Race @relation(fields: [raceId], references: [id])

    @@id([raceId, abilityId])
}

model RaceLanguageMap {
    raceId      Int
    languageId  Int
    isAutomatic Boolean @default(false)

    race Race @relation(fields: [raceId], references: [id])

    @@id([raceId, languageId])
}

model RaceSourceMap {
    raceId        Int
    sourceBookId  Int
    pageNumber    Int?

    Race         Race        @relation(fields: [raceId], references: [id])
    SourceBook   SourceBook? @relation(fields: [sourceBookId], references: [id])

    @@id([raceId, sourceBookId])
}

// =================
// Mundane Armor, Weapons etc.
// =================

model Armor {
    id                 Int      @id @default(autoincrement())
    name               String   @db.VarChar(100)
    description        String?  @db.Text
    category           Int
    cost               Decimal? @db.Decimal(5, 2)
    bonus              Int?
    dexterityCap       Int?
    checkPenalty       Int?
    arcaneSpellFailure Int?
    speedCapThirty     Int?
    speedCapTwenty     Int?
    weight             Int?
}

model Weapon {
    id           Int      @id @default(autoincrement())
    name         String
    description  String?  @db.Text
    category     Int
    type         Int
    cost         Decimal? @db.Decimal(5, 2)
    damageSmall  String?
    damageMedium String?
    critical     String?
    range        String?
    weight       Decimal? @db.Decimal(5, 2)
    damageTypeId Int?
}

// =================
// Source Books
// =================

model SourceBook {
    id           Int       @id @default(autoincrement())
    name         String
    abbreviation String
    releaseDate  DateTime?
    editionId    Int?
    description  String?   @db.Text
    isVisible    Boolean   @default(true)

    classes ClassSourceMap[]
    races   RaceSourceMap[]
    spells  SpellSourceMap[]
}

// =================
// Reference Tables
// =================

enum TextAlignment {
    left
    center
    right
}

model ReferenceTable {
    slug        String  @id
    name        String
    description String? @db.Text

    columns ReferenceTableColumn[]
    rows    ReferenceTableRow[]
    cells   ReferenceTableCell[]
}

model ReferenceTableColumn {
    tableSlug   String
    index       Int
    header      String
    span        Int?
    alignment   TextAlignment?

    cells ReferenceTableCell[]
    table ReferenceTable       @relation(fields: [tableSlug], references: [slug])

    @@id([tableSlug, index])
}

model ReferenceTableRow {
    tableSlug String
    index  Int

    cells ReferenceTableCell[]
    table ReferenceTable       @relation(fields: [tableSlug], references: [slug])

    @@id([tableSlug, index])
}

model ReferenceTableCell {
    tableSlug   String
    columnIndex Int
    rowIndex    Int
    value       String? @db.Text
    colSpan     Int?
    rowSpan     Int?

    column ReferenceTableColumn @relation(fields: [tableSlug, columnIndex], references: [tableSlug, index])
    row    ReferenceTableRow    @relation(fields: [tableSlug, rowIndex], references: [tableSlug, index])
    table  ReferenceTable       @relation(fields: [tableSlug], references: [slug])

    @@id([tableSlug, columnIndex, rowIndex])
}

// =================
// User Characters
// =================

model UserCharacter {
    id          Int     @id @default(autoincrement())
    userId      Int
    name        String
    raceId      Int
    alignmentId Int
    age         Int?
    height      Int?
    weight      Int?
    eyes        String?
    hair        String?
    gender      String?
    notes       String? @db.Text

    attributes UserCharacterAttribute[]
    race       Race                     @relation(fields: [raceId], references: [id])
    user       User                     @relation(fields: [userId], references: [id])
}

model UserCharacterAttribute {
    id          Int @id @default(autoincrement())
    characterId Int
    attributeId Int
    value       Int

    character UserCharacter @relation(fields: [characterId], references: [id])
}

// =================
// User related
// =================

model User {
    id                 Int      @id @default(autoincrement())
    username           String
    email              String
    password           String
    isAdmin            Boolean  @default(false)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    preferredEditionId Int?

    characters UserCharacter[]
}
