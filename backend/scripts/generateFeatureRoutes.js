import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const featuresDir = path.resolve(__dirname, '../src/features');
const outputDir = path.resolve(__dirname, '../src/lib');
const outputFile = path.join(outputDir, 'generatedFeatureRoutes.js');

async function generateFeatureRoutes() {
    let imports = [];
    let featureRoutes = [];

    try {
        const featureDirs = await fs.readdir(featuresDir, { withFileTypes: true });

        for (const featureDirent of featureDirs) {
            if (featureDirent.isDirectory()) {
                const featureName = featureDirent.name;
                const routesPath = path.join(featuresDir, featureName, 'routes', `${featureName}Routes.js`);

                try {
                    // Check if routes file exists
                    await fs.access(routesPath);

                    const relativePath = path.relative(outputDir, routesPath).replace(/\//g, '/');
                    const importName = `${featureName}Router`;
                    imports.push(`import ${importName} from '${relativePath}';`);
                    featureRoutes.push(`    { path: '/api/${featureName}', router: ${importName} },`);

                } catch (error) {
                    // console.log(`No routes file found for ${featureName}.`);
                    // Ignore, as not all features will have dedicated routes
                }
            }
        }

        const fileContent = `// This file is auto-generated by generateFeatureRoutes.js. Do not edit directly.

${imports.join('\n')}

export const featureRoutes = [
${featureRoutes.join('\n')}
];
`;

        await fs.mkdir(outputDir, { recursive: true });
        await fs.writeFile(outputFile, fileContent);
        console.log(`Successfully generated ${outputFile}`);

    } catch (error) {
        console.error('Error generating feature routes:', error);
        process.exit(1);
    }
}

generateFeatureRoutes(); 